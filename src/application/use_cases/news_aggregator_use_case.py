from typing import List, Optional
from datetime import datetime
import asyncio

from ...domain.entities.news import News
from ...domain.entities.report import Report
from ...domain.repositories.news_repository import NewsRepository
from ...domain.repositories.email_repository import EmailRepository
from ..services.report_service import ReportService


class NewsAggregatorUseCase:
    """Caso de uso principal para agrega√ß√£o de not√≠cias sobre Adam Sandler."""
    
    def __init__(self, news_repository: NewsRepository, email_repository: EmailRepository):
        self.news_repository = news_repository
        self.email_repository = email_repository
        self.report_service = ReportService(news_repository, email_repository)
    
    async def execute_daily_news_report(self, recipient_email: str) -> bool:
        """Executa o processo completo de busca e envio de relat√≥rio di√°rio."""
        try:
            print("=== ADAM SANDLER NEWS AGENT ===")
            print("Iniciando processo de agrega√ß√£o de not√≠cias...")
            print(f"Destinat√°rio: {recipient_email}")
            print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
            print("-" * 50)
            
            # Validar e-mail
            if not self.email_repository.validate_email(recipient_email):
                print(f"‚ùå E-mail inv√°lido: {recipient_email}")
                return False
            
            # Gerar e enviar relat√≥rio
            success = await self.report_service.generate_and_send_report(
                recipient_email=recipient_email,
                title=f"Relat√≥rio Di√°rio - Adam Sandler - {datetime.now().strftime('%d/%m/%Y')}",
                send_html=True
            )
            
            if success:
                print("‚úÖ Processo conclu√≠do com sucesso!")
                print(f"üìß Relat√≥rio enviado para {recipient_email}")
            else:
                print("‚ùå Falha no processo de envio do relat√≥rio")
            
            print("-" * 50)
            return success
            
        except Exception as e:
            print(f"‚ùå Erro no processo de agrega√ß√£o: {str(e)}")
            return False
        finally:
            # Fechar sess√£o HTTP se existir
            if hasattr(self.news_repository, 'close_session'):
                await self.news_repository.close_session()
    
    async def execute_news_search_only(self) -> List[News]:
        """Executa apenas a busca de not√≠cias sem enviar relat√≥rio."""
        try:
            print("=== BUSCA DE NOT√çCIAS SOBRE ADAM SANDLER ===")
            print(f"Iniciando busca em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
            print("-" * 50)
            
            # Buscar not√≠cias
            news_list = await self.news_repository.fetch_all_adam_sandler_news()
            
            # Filtrar not√≠cias relevantes
            relevant_news = [news for news in news_list if news.is_relevant_to_adam_sandler()]
            
            print(f"üì∞ Total de not√≠cias encontradas: {len(news_list)}")
            print(f"‚úÖ Not√≠cias relevantes: {len(relevant_news)}")
            
            # Mostrar resumo das fontes
            sources = {}
            for news in relevant_news:
                sources[news.source] = sources.get(news.source, 0) + 1
            
            print("\nüìä Resumo por fonte:")
            for source, count in sources.items():
                print(f"  ‚Ä¢ {source}: {count} not√≠cias")
            
            print("-" * 50)
            return relevant_news
            
        except Exception as e:
            print(f"‚ùå Erro na busca de not√≠cias: {str(e)}")
            return []
        finally:
            # Fechar sess√£o HTTP se existir
            if hasattr(self.news_repository, 'close_session'):
                await self.news_repository.close_session()
    
    async def execute_test_workflow(self, recipient_email: str) -> bool:
        """Executa um fluxo de teste completo."""
        try:
            print("=== TESTE DO ADAM SANDLER NEWS AGENT ===")
            print(f"Testando envio para: {recipient_email}")
            print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
            print("-" * 50)
            
            # Testar conex√£o de e-mail
            print("üîß Testando conex√£o SMTP...")
            if hasattr(self.email_repository, 'test_connection'):
                if not self.email_repository.test_connection():
                    print("‚ùå Falha na conex√£o SMTP")
                    return False
                print("‚úÖ Conex√£o SMTP OK")
            
            # Enviar e-mail de teste
            print("üìß Enviando e-mail de teste...")
            success = await self.report_service.send_test_report(recipient_email)
            
            if success:
                print("‚úÖ Teste conclu√≠do com sucesso!")
                print(f"üìß E-mail de teste enviado para {recipient_email}")
            else:
                print("‚ùå Falha no envio do e-mail de teste")
            
            print("-" * 50)
            return success
            
        except Exception as e:
            print(f"‚ùå Erro no teste: {str(e)}")
            return False
    
    async def execute_report_generation_only(self, save_to_file: Optional[str] = None) -> Optional[Report]:
        """Executa apenas a gera√ß√£o do relat√≥rio sem enviar por e-mail."""
        try:
            print("=== GERA√á√ÉO DE RELAT√ìRIO ===")
            print(f"Iniciando em {datetime.now().strftime('%d/%m/%Y √†s %H:%M')}")
            print("-" * 50)
            
            # Gerar relat√≥rio
            report = await self.report_service.generate_adam_sandler_report()
            
            print(f"üìä Relat√≥rio gerado:")
            print(f"  ‚Ä¢ T√≠tulo: {report.title}")
            print(f"  ‚Ä¢ Not√≠cias encontradas: {report.get_news_count()}")
            print(f"  ‚Ä¢ Fontes consultadas: {len(report.get_sources_summary())}")
            
            # Salvar em arquivo se solicitado
            if save_to_file:
                success = await self.report_service.save_report_to_file(report, save_to_file, "html")
                if success:
                    print(f"üíæ Relat√≥rio salvo em: {save_to_file}")
                else:
                    print("‚ùå Falha ao salvar relat√≥rio")
            
            print("-" * 50)
            return report
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o do relat√≥rio: {str(e)}")
            return None
        finally:
            # Fechar sess√£o HTTP se existir
            if hasattr(self.news_repository, 'close_session'):
                await self.news_repository.close_session()
    
    async def get_system_status(self) -> dict:
        """Obt√©m o status do sistema."""
        try:
            # Obter estat√≠sticas
            stats = await self.report_service.get_report_statistics()
            
            # Testar conex√µes
            email_status = "unknown"
            if hasattr(self.email_repository, 'test_connection'):
                email_status = "ok" if self.email_repository.test_connection() else "error"
            
            return {
                "timestamp": datetime.now().isoformat(),
                "status": "operational",
                "email_service": email_status,
                "available_sources": self.news_repository.get_available_sources(),
                "statistics": stats
            }
            
        except Exception as e:
            return {
                "timestamp": datetime.now().isoformat(),
                "status": "error",
                "error": str(e)
            }